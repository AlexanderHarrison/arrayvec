var searchIndex = {};
searchIndex['arrayvec'] = {"items":[[0,"","arrayvec","",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for **ArrayVec**.",null,null],[3,"Drain","","A draining iterator for **ArrayVec**.",null,null],[11,"start","core::ops","",0,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",1,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",2,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",2,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[8,"Array","arrayvec","Trait for fixed size arrays.",null,null],[16,"Item","","The array's element type",3,null],[8,"RangeArgument","","**RangeArgument** is implemented by Rust's built-in range types, produced\nby range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"drop","","",4,{"inputs":[{"name":"arrayvec"}],"output":null}],[11,"new","","Create a new empty **ArrayVec**.",4,{"inputs":[{"name":"arrayvec"}],"output":{"name":"arrayvec"}}],[11,"len","","Return the number of elements in the **ArrayVec**.",4,{"inputs":[{"name":"arrayvec"}],"output":{"name":"usize"}}],[11,"capacity","","Return the capacity of the **ArrayVec**.",4,{"inputs":[{"name":"arrayvec"}],"output":{"name":"usize"}}],[11,"push","","Push **element** to the end of the vector.",4,{"inputs":[{"name":"arrayvec"},{"name":"a"}],"output":{"name":"option"}}],[11,"pop","","Remove the last element in the vector.",4,{"inputs":[{"name":"arrayvec"}],"output":{"name":"option"}}],[11,"swap_remove","","Remove the element at **index** and swap the last element into its place.",4,{"inputs":[{"name":"arrayvec"},{"name":"usize"}],"output":{"name":"option"}}],[11,"remove","","Remove the element at **index** and shift down the following elements.",4,{"inputs":[{"name":"arrayvec"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Insert **element** in position **index**.",4,{"inputs":[{"name":"arrayvec"},{"name":"usize"},{"name":"a"}],"output":{"name":"option"}}],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",4,{"inputs":[{"name":"arrayvec"},{"name":"r"}],"output":{"name":"drain"}}],[6,"Target","","",null,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"from","","",4,{"inputs":[{"name":"arrayvec"},{"name":"a"}],"output":{"name":"self"}}],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[11,"into_iter","","",4,{"inputs":[{"name":"arrayvec"}],"output":{"name":"intoiter"}}],[6,"Item","","",null,null],[11,"next","","",5,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",5,{"inputs":[{"name":"intoiter"}],"output":null}],[6,"Item","","",null,null],[11,"next","","",6,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",6,{"inputs":[{"name":"drain"}],"output":null}],[11,"extend","","",4,{"inputs":[{"name":"arrayvec"},{"name":"t"}],"output":null}],[11,"from_iter","","",4,{"inputs":[{"name":"arrayvec"},{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"arrayvec"}],"output":{"name":"self"}}],[11,"hash","","",4,{"inputs":[{"name":"arrayvec"},{"name":"h"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"arrayvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"arrayvec"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[8,"Array"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex['nodrop'] = {"items":[[0,"","nodrop","",null,null],[3,"NoDrop","","A type holding **T** that will not call its destructor on drop",null,null],[11,"new","","Create a new **NoDrop**.",0,{"inputs":[{"name":"nodrop"},{"name":"t"}],"output":{"name":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"inputs":[{"name":"nodrop"}],"output":{"name":"t"}}],[11,"drop","","",0,{"inputs":[{"name":"nodrop"}],"output":null}],[6,"Target","","",null,null],[11,"deref","","",0,{"inputs":[{"name":"nodrop"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"nodrop"}],"output":{"name":"t"}}]],"paths":[[3,"NoDrop"]]};
initSearch(searchIndex);
