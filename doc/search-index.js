var searchIndex = {};
searchIndex["arrayvec"] = {"doc":"**arrayvec** provides the types `ArrayVec` and `ArrayString`:\narray-backed vector and string types, which store their contents inline.","items":[[8,"RangeArgument","arrayvec","**IndexRange** is implemented by Rust&#39;s built-in range types, produced\nby range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",0,null],[11,"end","","End index (exclusive)",0,null],[3,"ArrayString","","A string with a fixed capacity.",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for `ArrayVec`.",null,null],[3,"Drain","","A draining iterator for `ArrayVec`.",null,null],[3,"CapacityError","","Error value indicating insufficient capacity",null,null],[11,"new","","Create a new empty `ArrayString`.",1,{"inputs":[],"output":{"name":"arraystring"}}],[11,"from","","Create a new `ArrayString` from a `str`.",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"capacity","","Return the capacity of the `ArrayString`.",1,null],[11,"push","","Adds the given char to the end of the string.",1,null],[11,"push_str","","Adds the given string slice to the end of the string.",1,null],[11,"clear","","Make the string empty.",1,null],[11,"set_len","","Set the strings&#39;s length.",1,null],[11,"as_str","","Return a string slice of the whole `ArrayString`.",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"hash","","",1,null],[11,"borrow","","",1,null],[11,"as_ref","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"write_str","","",1,null],[11,"clone","","",1,null],[11,"clone_from","","",1,null],[8,"Array","","Trait for fixed size arrays.",null,null],[16,"Item","","The array&#39;s element type",2,null],[11,"drop","","",3,null],[11,"new","","Create a new empty `ArrayVec`.",3,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"len","","Return the number of elements in the `ArrayVec`.",3,null],[11,"capacity","","Return the capacity of the `ArrayVec`.",3,null],[11,"push","","Push `element` to the end of the vector.",3,null],[11,"insert","","Insert `element` in position `index`.",3,null],[11,"pop","","Remove the last element in the vector.",3,null],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",3,null],[11,"remove","","Remove the element at `index` and shift down the following elements.",3,null],[11,"clear","","Remove all elements in the vector.",3,null],[11,"retain","","Retains only the elements specified by the predicate.",3,null],[11,"set_len","","Set the vector&#39;s length without dropping or moving out elements",3,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",3,null],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",3,null],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",3,null],[11,"as_slice","","Return a slice containing all elements of the vector.",3,null],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",3,null],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"from","","",3,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"into_iter","","",3,null],[11,"next","","",4,null],[11,"size_hint","","",4,null],[11,"next_back","","",4,null],[11,"drop","","",4,null],[11,"next","","",5,null],[11,"size_hint","","",5,null],[11,"next_back","","",5,null],[11,"drop","","",5,null],[11,"extend","","",3,null],[11,"from_iter","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",3,null],[11,"clone_from","","",3,null],[11,"hash","","",3,null],[11,"eq","","",3,null],[11,"eq","","",3,null],[11,"borrow","","",3,null],[11,"borrow_mut","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"fmt","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"ge","","",3,null],[11,"gt","","",3,null],[11,"cmp","","",3,null],[11,"write","","",3,null],[11,"flush","","",3,null],[11,"partial_cmp","","",6,null],[11,"lt","","",6,null],[11,"le","","",6,null],[11,"gt","","",6,null],[11,"ge","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"cmp","","",6,null],[11,"clone","","",6,null],[11,"element","","Extract the overflowing element",6,null],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",6,null],[11,"description","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null]],"paths":[[8,"RangeArgument"],[3,"ArrayString"],[8,"Array"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"],[3,"CapacityError"]]};
searchIndex["nodrop"] = {"doc":"","items":[[3,"NoDrop","nodrop","A type holding **T** that will not call its destructor on drop",null,null],[11,"new","","Create a new **NoDrop**.",0,{"inputs":[{"name":"t"}],"output":{"name":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,null],[11,"drop","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null]],"paths":[[3,"NoDrop"]]};
searchIndex["odds"] = {"doc":"Odds and ends â€” collection miscellania.","items":[[3,"Fix","odds","Fixpoint combinator for rust closures, generalized over the return type.",null,null],[12,"0","","",0,null],[5,"ref_eq","","Compare if **a** and **b** are equal *as pointers*.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"ptr_eq","","Compare if **a** and **b** are equal pointers.",null,null],[5,"raw_byte_repr","","Safe to use with any wholly initialized memory `ptr`",null,null],[5,"get_unchecked","","Use `debug_assert!` to check indexing in debug mode. In release mode, no checks are done.",null,null],[5,"get_unchecked_mut","","Use `debug_assert!` to check indexing in debug mode. In release mode, no checks are done.",null,null],[5,"debug_assert_unreachable","","Act as `debug_assert!` in debug mode, asserting that this point is not reached.",null,null],[5,"slice_unchecked","","Check slicing bounds in debug mode, otherwise just act as an unchecked\nslice call.",null,null],[5,"slice_unchecked_mut","","Check slicing bounds in debug mode, otherwise just act as an unchecked\nslice call.",null,null],[5,"ref_slice","","Create a length 1 slice out of a reference",null,null],[5,"ref_slice_mut","","Create a length 1 mutable slice out of a reference",null,null],[11,"call","","",0,null],[11,"clone","","",0,null],[11,"call_once","","",0,null],[11,"call_mut","","",0,null],[11,"call","","",0,null],[0,"string","","Extensions to `&amp;str` and `String`",null,null],[3,"Prefixes","odds::string","Iterator of all non-empty prefixes",null,null],[3,"Suffixes","","Iterator of all non-empty suffixes",null,null],[3,"Substrings","","Iterator of all non-empty substrings",null,null],[3,"CharChunks","","An iterator that splits the string in substrings of each `n`\n`char` per substring. The last item will contain the remainder if\n`n` does not divide the char length of the string evenly.",null,null],[3,"CharWindows","","An iterator that produces substrings of each `n`\n`char` per substring in a sliding window that advances one char at a time.",null,null],[8,"StrExt","","Extra methods for `str`",null,null],[10,"rep","","Repeat the string `n` times.",1,null],[10,"append","","Requires `feature=&quot;std&quot;`",1,null],[10,"prefixes","","All non-empty prefixes",1,null],[10,"suffixes","","All non-empty suffixes",1,null],[10,"substrings","","Produce all non-empty substrings",1,null],[10,"is_acceptable_index","","Return `true` if `index` is acceptable for slicing the string.",1,null],[8,"StrSlice","","Extension trait for `str` for string slicing without panicking",null,null],[10,"get_slice","","Return a slice of the string, if it is in bounds /and on character boundaries/,\notherwise return `None`",2,null],[8,"StringExt","","Extra methods for `String`",null,null],[10,"insert_str","","**Panics** if `index` is out of bounds.",3,null],[8,"StrChunksWindows","","Extension traits for the `char_chunks` and `char_windows` methods",null,null],[10,"char_chunks","","Return an iterator that splits the string in substrings of each `n`\n`char` per substring. The last item will contain the remainder if\n`n` does not divide the char length of the string evenly.",4,null],[10,"char_windows","","Return an iterator that produces substrings of each `n`\n`char` per substring in a sliding window that advances one char at a time.",4,null],[11,"clone","","",5,null],[11,"next","","",5,null],[11,"clone","","",6,null],[11,"next","","",6,null],[11,"clone","","",7,null],[11,"next","","",7,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"next","","",8,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"next","","",9,null],[0,"vec","odds","Extensions to `Vec`",null,null],[8,"VecExt","odds::vec","Extra methods for `Vec&lt;T&gt;`",null,null],[10,"splice","","Remove elements in a range, and insert from an iterator in their place.",10,null],[10,"retain_mut","","Retains only the elements specified by the predicate.",10,null],[0,"slice","odds","Extra functions for slices",null,null],[5,"shared_prefix","odds::slice","Return the end index of the longest shared (equal) prefix of `a` and `b`.",null,null],[8,"IndexRange","odds","**IndexRange** is implemented by Rust&#39;s built-in range types, produced\nby range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",11,null],[11,"end","","End index (exclusive)",11,null],[11,"start","","Start index (inclusive)",11,null],[11,"end","","End index (exclusive)",11,null]],"paths":[[3,"Fix"],[8,"StrExt"],[8,"StrSlice"],[8,"StringExt"],[8,"StrChunksWindows"],[3,"Prefixes"],[3,"Suffixes"],[3,"Substrings"],[3,"CharChunks"],[3,"CharWindows"],[8,"VecExt"],[8,"IndexRange"]]};
initSearch(searchIndex);
